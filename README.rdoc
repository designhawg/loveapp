<% @response.each do |track| %>
  <tr>
  <% if @response != nil %>
    <td><%#= @response['Tracks']%></td>
    <td><%#= track['title'] %></td>
    <td><%#= track.artist_name %></td>
    <td><%#= link_to 'Sample', track %></td>
    <td><%#= link_to 'Add', track %></td>
  <% end %>
  </tr>
<% end %>


---
#where does this loop go?
#add_to_favorites
  #if track_exists?(:MnetId)
   #add_to_current_user_mixtape(:id)
  #else
   # create_track(:MnetId)
  #end
#end



I am attempting XML parsing using a gem called httparty


//////////////

MediaNet Notes

IE key
7I0ubAZUWSFg1z1OWpb6YWK9o

SS key
cNlIVDl5JWS


HTTParty.get("http://ieapi.mndigital.com/?method=Search.GetTracks&format=xml&title=sam*&album=&albumMnetId=
&artist=&artistMnetId=&keyword=&rights=purchase&includeExplicit=true&mainArtistOnly=
true&genre=&page=1&pageSize=10&blacklistIds=&apiKey=7I0ubAZUWSFg1z1OWpb6YWK9o")


///

How to Retrieve Most Popular aka Top X content 
If you call the Search APIs without including a keyword or search string, you will get back the Top N
results by popularity ranking. Be sure to use the paging parameters wisely; i.e., only request the top 100 or 50, etc.

///
 
Searching with Wildcards 
You can use the wildcards "*" and "?" for several of the input parameters for the various search APIs. For example, "sam*" will return all albums starting with "sam:" 

  http://ieapi.mndigital.com/?method=Search.GetTracks&format=xml&title=sam*&album=&albumMnetId=
  &artist=&artistMnetId=&keyword=&rights=purchase&includeExplicit=true&mainArtistOnly=
  true&genre=&page=1&pageSize=10&blacklistIds=&apiKey=7I0ubAZUWSFg1z1OWpb6YWK9o   

Important: Wildcard searches should not be used to build a local copy of artist, album, or track databases for performance and currency reasons. Data cached will become out of date with additions, deletions, and changes to the catalog. Additionally, for performance reasons only a maximum number of 250 results are returned from any of the search APIs. To have a copy of the database, Customers can instead subscribe to the XML Content Data Feed. Please see MN Open API Best Practices Checklist #20.

///

As an option for MN Open Plus Customers, MediaNet also delivers Samples via HTTP Progressive 
Download. Part of the Mobile Support Plus Feature, this is primarily intended for Mobile Applications such as iPhone and other iOS devices that do not support Flash. A related option is a 64kbps AAC+ sample.

///Getting started///

Request via HTTP GET 
  
  http://api.mndigital.com?method=search.gettracks&title=Come%20As%20You%20Are&artist=Nirvana 
  &rights=purchase&includeExplicit=true&page=1&pageSize=1&apiKey=YourAPIKEY&format=json 
  
  Note that the first line is the HTTP response status code and message, followed by the requested
  data in the body of the HTTP response, here formatted per request above as the (non-default) JSON


///
I think I need to use Search.GetTracks instead of Artists, but I left Artists in just in case.
///

Search.GetArtists 
  Description: Searches for artists by name and/or keyword.   
  Returns: artist matches (with a count) and artist images if any 
  Recommended HTTP Action: GET 
  Signature or SSL Required? Neither


Example: 
  ?method=search.getartists&name=Pearl+Jam&page=1&pageSize=10&ApiKey=YourApiKey 

Returns: 
  ArtistSearchResults 
  â€¢ Int TotalResult
///
Added includeKaraoke=true/false to Search.GetTracks and Search.GetAlbums (false by default


//////////////

These are notes from our twitter bootstrap meetup...

///popovers///

<a href="#" rel="popover" data-content="popover window content goes here" data-original-title="Title goes here">pop over trigger</a>

<script>
  $(document).ready(function() {
    $a('a[rel=popover]'.popover()
    });
</script>

///javascript actions of bootstrap///

modals, dropdowns, scrollspy, toggleable tabs, tooltips, popovers, collapse, carousel, typeahead 

///badges///

<span class="badge">1</span>
<span class="badge badge-xxxxxxxxx">1</span>

xxxxx indicate attribute of badge

///scrollspy///

$('#navbar').scrollspy()

<body data-spy="scroll">...</body>

Markup...
<a href="#home">home</a>

more on this in the BS doc

///modals///

All modals come with a heading and action links

You can stick modals into a partial to keep the code clean. 

http://twitter.github.com/bootstrap/javascript.html#modals

bootstrap-transitions.js controls the pretty fade that you will see on certain sites


///breadcrumbs///

For use on sites with a lot of content.

Awesome Nested gem for use dynamically generating the content needed for these breadcrumbs

http://twitter.github.com/bootstrap/components.html#breadcrumbs


///progress bars///

http://twitter.github.com/bootstrap/components.html#progress

for file-uploads... check out uploadify


///pagination///

http://twitter.github.com/bootstrap/components.html#pagination


///dropdowns///

http://twitter.github.com/bootstrap/javascript.html#dropdowns


///typography///

http://twitter.github.com/bootstrap/base-css.html#typography


///toggle tags///

think twitter settings page

http://twitter.github.com/bootstrap/javascript.html#tabs

google will skip over anything hidden within javascript

///typeahead///

http://twitter.github.com/bootstrap/javascript.html#typeahead

http://bootswatch.com/

http://wrapbootstrap.com/

http://www.lavishbootstrap.com/


////

McCaffery suggestion for XML model creation

# artist = {}
# xml_artist = data["Artists"][0]["Artist"][0]
# artist["mnet_id"] = xml_artist["MnetId"][0]
# artist["name"] = xml_artist["Name"][0]

////

# this is from an old application.html.erb file
# 
# <!DOCTYPE html>
# <html>
# <head>
#   <title>LoveIt.fm</title>
#   <%= stylesheet_link_tag    "application", :media => "all" %>
#   <%= javascript_include_tag "application" %>
#   <%= csrf_meta_tags %>
# </head>
# <body>
# <nav>
# <% if current_user %>
#   Welcome <%= current_user.name %>!
#   <%= link_to "Sign Out", signout_path %>
# <% else %>
#   <%= link_to "Sign in with Twitter", "/auth/twitter" %> 
# <% end %>
# </nav>
# <%= yield %>
# 
# </body>
# </html>

////

# @cfg = 'xxxsupport'
#           @user_key = '4787fsdbbfbfsdbhbfad5aba91129a3f1ed1b743321f7b'
#           @api_key = 'MrUser411'
#           @project = 'excelm-manoke'
#           @url_new_string = 'https://api.squishlist.com/auth/?cfg='+@cfg+'&user_key='+@user_key+'&api_key='+@api_key
#           # https://api.squishlist.com/auth/?cfg=xxxsupport&user_key=4787fsdbbfbfsdbhbfad5aba91129a3f1ed1b743321f7b&api_key=MrUser411  - this is what is created by @url_new_string
#           response =  HTTParty.get(@url_new_string.to_str)  #submit the string to get the token
#           @parsed_and_a_hash = JSON.parse(response)
#           @token = @parsed_and_a_hash["token"]
#make a new string with the token

# @urlstring_to_post = 'https://api.squishlist.com/rest/?cfg='+@cfg+'&token='+@token+'&method=squish.issue.submit&prj='+@project
# 
#           #submit and get a result
# 
#           @result = HTTParty.post(@urlstring_to_post.to_str, :body => {:subject => 'This is the screen name', :issue_type => 'Application Problem', :status => 'Open', :priority => 'Normal', :description => 'This is the description for the problem'})










































